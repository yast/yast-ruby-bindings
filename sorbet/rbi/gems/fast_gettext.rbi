# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/fast_gettext/all/fast_gettext.rbi
#
# fast_gettext-1.7.0
module FastGettext
  def N_(*args); end
  def Nn_(*args); end
  def _(*args); end
  def add_text_domain(name, options); end
  def locale_path; end
  def n_(*args); end
  def ns_(*args); end
  def s_(*args); end
  extend FastGettext
  include FastGettext::Storage
end
module FastGettext::GetText
end
class FastGettext::GetText::MOFile < Hash
  def charset; end
  def convert_encoding(string, original_string); end
  def filename; end
  def hash_string(str); end
  def initialize(output_charset = nil); end
  def last_modified; end
  def last_modified=(arg0); end
  def little_endian; end
  def little_endian=(arg0); end
  def load(arg); end
  def load_from_file(filename); end
  def load_from_stream(io); end
  def next_prime(seed); end
  def nplurals; end
  def path; end
  def path=(arg0); end
  def plural; end
  def plural_as_proc; end
  def prime?(number); end
  def save_to_file(filename); end
  def save_to_stream(io); end
  def self.open(arg = nil, output_charset = nil); end
  def set_comment(msgid_or_sym, comment); end
  def update!; end
end
class FastGettext::GetText::MOFile::InvalidFormat < RuntimeError
end
class FastGettext::GetText::MOFile::Header < Struct
  def hash_table_offset; end
  def hash_table_offset=(_); end
  def hash_table_size; end
  def hash_table_size=(_); end
  def magic; end
  def magic=(_); end
  def nstrings; end
  def nstrings=(_); end
  def orig_table_offset; end
  def orig_table_offset=(_); end
  def revision; end
  def revision=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def translated_table_offset; end
  def translated_table_offset=(_); end
end
class FastGettext::GetText::MOFile::HeaderRev1 < FastGettext::GetText::MOFile::Header
  def n_sysdep_segments; end
  def n_sysdep_segments=(arg0); end
  def n_sysdep_strings; end
  def n_sysdep_strings=(arg0); end
  def orig_sysdep_tab_offset; end
  def orig_sysdep_tab_offset=(arg0); end
  def sysdep_segments_offset; end
  def sysdep_segments_offset=(arg0); end
  def trans_sysdep_tab_offset; end
  def trans_sysdep_tab_offset=(arg0); end
end
class FastGettext::MoFile
  def [](key); end
  def data; end
  def initialize(file, options = nil); end
  def load_data; end
  def make_singular_and_plural_available; end
  def plural(*msgids); end
  def pluralisation_rule; end
  def self.empty; end
  def split_plurals(singular_plural); end
end
class FastGettext::Cache
  def []=(key, value); end
  def delete(key); end
  def fetch(key); end
  def initialize; end
  def reload!; end
  def switch_to(text_domain, locale); end
end
module FastGettext::Storage
  def _locale; end
  def _locale=(value); end
  def available_locales; end
  def available_locales=(value); end
  def best_locale_in(locales); end
  def cache; end
  def cache_class; end
  def cache_class=(value); end
  def cached_find(key); end
  def cached_plural_find(*keys); end
  def current_repository; end
  def default_available_locales; end
  def default_available_locales=(value); end
  def default_locale; end
  def default_locale=(new_locale); end
  def default_text_domain; end
  def default_text_domain=(value); end
  def expire_cache_for(key); end
  def format_locale(locale); end
  def formatted_sorted_locales(locales); end
  def key_exist?(key); end
  def locale; end
  def locale=(new_locale); end
  def pluralisation_rule; end
  def pluralisation_rule=(value); end
  def reload!; end
  def set_locale(new_locale); end
  def silence_errors; end
  def switch_cache; end
  def text_domain; end
  def text_domain=(value); end
  def translation_repositories; end
  def weighted_locales(locales); end
  def with_locale(temp_locale); end
end
class FastGettext::Storage::NoTextDomainConfigured < RuntimeError
  def to_s; end
end
module FastGettext::Translation
  def N_(translate); end
  def Nn_(*keys); end
  def _(key, &block); end
  def n_(*keys, &block); end
  def ns_(*args, &block); end
  def s_(key, separator = nil, &block); end
  def self.included(klas); end
  extend FastGettext::Translation
end
module FastGettext::TranslationMultidomain
  def D_(key); end
  def Dn_(*keys); end
  def Dns_(*keys); end
  def Ds_(key, separator = nil); end
  def _in_domain(domain); end
  def d_(domain, key, &block); end
  def dn_(domain, *keys, &block); end
  def dns_(domain, *keys, &block); end
  def ds_(domain, key, separator = nil, &block); end
  def self.included(klas); end
  extend FastGettext::TranslationMultidomain
end
module FastGettext::TranslationRepository
  def build(name, options); end
  extend FastGettext::TranslationRepository
end
class String
  def _fast_gettext_old_format_m(arg0); end
end
module Yast
end
class Yast::TestClient
  def main; end
end
